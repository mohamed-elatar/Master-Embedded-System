
safe_password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00000de0  00000e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  00001640  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000132a  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059f  00000000  00000000  00002a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000081a  00000000  00000000  00003029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000354  00000000  00000000  00003844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a9  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ec0  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3f       	cpi	r26, 0xF2	; 242
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 ef       	ldi	r26, 0xF2	; 242
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3f       	cpi	r26, 0xF2	; 242
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 05 	call	0xaa8	; 0xaa8 <main>
  8a:	0c 94 ee 06 	jmp	0xddc	; 0xddc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vset_pin_direction>:
/************************************** Driver_DIO ****************************************/

/********* dirction_pin **************/
void DIO_vset_pin_direction(char portname , char pinnumber , char dirction)
{
	switch(portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vset_pin_direction+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vset_pin_direction+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vset_pin_direction+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vset_pin_direction+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vset_pin_direction+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vset_pin_direction+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vset_pin_direction+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vset_pin_direction+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vset_pin_direction+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vset_pin_direction+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vset_pin_direction+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vset_pin_direction+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vset_pin_direction+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vset_pin_direction+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vset_pin_direction+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vset_pin_direction+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vset_pin_direction+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vset_pin_direction+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vset_pin_direction+0xe8>
	{
		case 'A':
		case 'a':
		if (dirction == 1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vset_pin_direction+0x58>
		{
			SET_BIT(MY_DDRA,pinnumber);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vset_pin_direction+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vset_pin_direction+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		else
		{
			CLR_BIT(MY_DDRA,pinnumber);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vset_pin_direction+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vset_pin_direction+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;

		case 'B':
		case 'b':
		if (dirction == 1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vset_pin_direction+0x92>
		{
			SET_BIT(MY_DDRB,pinnumber);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vset_pin_direction+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vset_pin_direction+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		else
		{
			CLR_BIT(MY_DDRB,pinnumber);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vset_pin_direction+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vset_pin_direction+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;

		case 'C':
		case 'c':
		if (dirction == 1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vset_pin_direction+0xcc>
		{
			SET_BIT(MY_DDRC,pinnumber);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vset_pin_direction+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vset_pin_direction+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(MY_DDRC,pinnumber);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vset_pin_direction+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vset_pin_direction+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		}
		break;

		case 'D':
		case 'd':
		if (dirction == 1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vset_pin_direction+0x106>
		{
			SET_BIT(MY_DDRD,pinnumber);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vset_pin_direction+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vset_pin_direction+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
		}
		else
		{
			CLR_BIT(MY_DDRD,pinnumber);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vset_pin_direction+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vset_pin_direction+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_vwrite_pin_value>:


/********* write_pin **************/
void DIO_vwrite_pin_value(char portname , char pinnumber , char val)
{
	switch(portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vwrite_pin_value+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vwrite_pin_value+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vwrite_pin_value+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vwrite_pin_value+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vwrite_pin_value+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vwrite_pin_value+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwrite_pin_value+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vwrite_pin_value+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vwrite_pin_value+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vwrite_pin_value+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vwrite_pin_value+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vwrite_pin_value+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vwrite_pin_value+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vwrite_pin_value+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vwrite_pin_value+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vwrite_pin_value+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vwrite_pin_value+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vwrite_pin_value+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vwrite_pin_value+0xe8>
	{
		case 'A':
		case 'a':
		if (val == 1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vwrite_pin_value+0x58>
		{
			SET_BIT(MY_PORTA,pinnumber);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vwrite_pin_value+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vwrite_pin_value+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(MY_PORTA,pinnumber);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vwrite_pin_value+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vwrite_pin_value+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;

		case 'B':
		case 'b':
		if (val == 1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vwrite_pin_value+0x92>
		{
			SET_BIT(MY_PORTB,pinnumber);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vwrite_pin_value+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vwrite_pin_value+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(MY_PORTB,pinnumber);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vwrite_pin_value+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vwrite_pin_value+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;

		case 'C':
		case 'c':
		if (val == 1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vwrite_pin_value+0xcc>
		{
			SET_BIT(MY_PORTC,pinnumber);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vwrite_pin_value+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vwrite_pin_value+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(MY_PORTC,pinnumber);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vwrite_pin_value+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vwrite_pin_value+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;

		case 'D':
		case 'd':
		if (val == 1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vwrite_pin_value+0x106>
		{
			SET_BIT(MY_PORTD,pinnumber);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vwrite_pin_value+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vwrite_pin_value+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(MY_PORTD,pinnumber);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vwrite_pin_value+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vwrite_pin_value+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_vtoggle_pin>:


/********* toggle_pin **************/
void DIO_vtoggle_pin(char portname , char pinnumber)
{
	switch(portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_vtoggle_pin+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_vtoggle_pin+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_vtoggle_pin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_vtoggle_pin+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_vtoggle_pin+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_vtoggle_pin+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_vtoggle_pin+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_vtoggle_pin+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_vtoggle_pin+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_vtoggle_pin+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_vtoggle_pin+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_vtoggle_pin+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_vtoggle_pin+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_vtoggle_pin+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_vtoggle_pin+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(MY_PORTA,pinnumber);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_vtoggle_pin+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_vtoggle_pin+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
		break;
 320:	08 95       	ret

		case 'B':
		case 'b':
		TOG_BIT(MY_PORTB,pinnumber);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vtoggle_pin+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vtoggle_pin+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
		break;
 33a:	08 95       	ret

		case 'C':
		case 'c':
		TOG_BIT(MY_PORTC,pinnumber);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vtoggle_pin+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vtoggle_pin+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
		break;
 354:	08 95       	ret

		case 'D':
		case 'd':
		TOG_BIT(MY_PORTD,pinnumber);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_vtoggle_pin+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_vtoggle_pin+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_u8read_pin>:

/********* read_pin **************/
unsigned char DIO_u8read_pin (char portname , char pinnumber)
{
	unsigned char ret_value;
	switch (portname)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_u8read_pin+0x6>
 374:	51 c0       	rjmp	.+162    	; 0x418 <DIO_u8read_pin+0xa8>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_u8read_pin+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	39 f1       	breq	.+78     	; 0x3cc <DIO_u8read_pin+0x5c>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	c0 f5       	brcc	.+112    	; 0x3f2 <DIO_u8read_pin+0x82>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_u8read_pin+0x18>
 386:	5a c0       	rjmp	.+180    	; 0x43c <DIO_u8read_pin+0xcc>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_u8read_pin+0x36>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	f9 f0       	breq	.+62     	; 0x3cc <DIO_u8read_pin+0x5c>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	20 f4       	brcc	.+8      	; 0x39a <DIO_u8read_pin+0x2a>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_u8read_pin+0x28>
 396:	52 c0       	rjmp	.+164    	; 0x43c <DIO_u8read_pin+0xcc>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_u8read_pin+0x36>
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	51 f1       	breq	.+84     	; 0x3f2 <DIO_u8read_pin+0x82>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_u8read_pin+0x34>
 3a2:	4c c0       	rjmp	.+152    	; 0x43c <DIO_u8read_pin+0xcc>
 3a4:	39 c0       	rjmp	.+114    	; 0x418 <DIO_u8read_pin+0xa8>
	{
		case 'A':
		case 'a':
		ret_value = READ_BIT(MY_PINA,pinnumber);
 3a6:	29 b3       	in	r18, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8read_pin+0x44>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8read_pin+0x40>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	82 23       	and	r24, r18
 3bc:	93 23       	and	r25, r19
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8read_pin+0x54>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8read_pin+0x50>
 3c8:	98 2f       	mov	r25, r24
		break;
 3ca:	38 c0       	rjmp	.+112    	; 0x43c <DIO_u8read_pin+0xcc>

		case 'B':
		case 'b':
		ret_value = READ_BIT(MY_PINB,pinnumber);
 3cc:	26 b3       	in	r18, 0x16	; 22
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	06 2e       	mov	r0, r22
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_u8read_pin+0x6a>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_u8read_pin+0x66>
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	82 23       	and	r24, r18
 3e2:	93 23       	and	r25, r19
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8read_pin+0x7a>
 3e6:	95 95       	asr	r25
 3e8:	87 95       	ror	r24
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8read_pin+0x76>
 3ee:	98 2f       	mov	r25, r24
		break;
 3f0:	25 c0       	rjmp	.+74     	; 0x43c <DIO_u8read_pin+0xcc>

		case 'C':
		case 'c':
		ret_value = READ_BIT(MY_PINC,pinnumber);
 3f2:	23 b3       	in	r18, 0x13	; 19
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	06 2e       	mov	r0, r22
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_u8read_pin+0x90>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_u8read_pin+0x8c>
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	82 23       	and	r24, r18
 408:	93 23       	and	r25, r19
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_u8read_pin+0xa0>
 40c:	95 95       	asr	r25
 40e:	87 95       	ror	r24
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_u8read_pin+0x9c>
 414:	98 2f       	mov	r25, r24
		break;
 416:	12 c0       	rjmp	.+36     	; 0x43c <DIO_u8read_pin+0xcc>

		case 'D':
		case 'd':
		ret_value = READ_BIT(MY_PIND,pinnumber);
 418:	20 b3       	in	r18, 0x10	; 16
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	06 2e       	mov	r0, r22
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_u8read_pin+0xb6>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_u8read_pin+0xb2>
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	82 23       	and	r24, r18
 42e:	93 23       	and	r25, r19
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_u8read_pin+0xc6>
 432:	95 95       	asr	r25
 434:	87 95       	ror	r24
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_u8read_pin+0xc2>
 43a:	98 2f       	mov	r25, r24
		break;
	}
	return ret_value;
}
 43c:	89 2f       	mov	r24, r25
 43e:	08 95       	ret

00000440 <DIO_vset_port_direction>:


/********* dirction_port **************/
void DIO_vset_port_direction(char portname , char direction)
{
	switch(portname)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	d9 f0       	breq	.+54     	; 0x47a <DIO_vset_port_direction+0x3a>
 444:	85 34       	cpi	r24, 0x45	; 69
 446:	38 f4       	brcc	.+14     	; 0x456 <DIO_vset_port_direction+0x16>
 448:	82 34       	cpi	r24, 0x42	; 66
 44a:	99 f0       	breq	.+38     	; 0x472 <DIO_vset_port_direction+0x32>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	98 f4       	brcc	.+38     	; 0x476 <DIO_vset_port_direction+0x36>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	a1 f4       	brne	.+40     	; 0x47c <DIO_vset_port_direction+0x3c>
 454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_vset_port_direction+0x2e>
 456:	82 36       	cpi	r24, 0x62	; 98
 458:	61 f0       	breq	.+24     	; 0x472 <DIO_vset_port_direction+0x32>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	18 f4       	brcc	.+6      	; 0x464 <DIO_vset_port_direction+0x24>
 45e:	81 36       	cpi	r24, 0x61	; 97
 460:	69 f4       	brne	.+26     	; 0x47c <DIO_vset_port_direction+0x3c>
 462:	05 c0       	rjmp	.+10     	; 0x46e <DIO_vset_port_direction+0x2e>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	39 f0       	breq	.+14     	; 0x476 <DIO_vset_port_direction+0x36>
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	41 f4       	brne	.+16     	; 0x47c <DIO_vset_port_direction+0x3c>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <DIO_vset_port_direction+0x3a>
	{
		case 'A':
		case 'a':
		MY_DDRA = direction;
 46e:	6a bb       	out	0x1a, r22	; 26
		break;
 470:	08 95       	ret

		case 'B':
		case 'b':
		MY_DDRB = direction;
 472:	67 bb       	out	0x17, r22	; 23
		break;
 474:	08 95       	ret

		case 'C':
		case 'c':
		MY_DDRC = direction;
 476:	64 bb       	out	0x14, r22	; 20
		break;
 478:	08 95       	ret

		case 'D':
		case 'd':
		MY_DDRD = direction;
 47a:	61 bb       	out	0x11, r22	; 17
 47c:	08 95       	ret

0000047e <DIO_vwrite_port_value>:
}

/********* write_port **************/
void DIO_vwrite_port_value(char portname , char value)
{
	switch(portname)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_vwrite_port_value+0x3a>
 482:	85 34       	cpi	r24, 0x45	; 69
 484:	38 f4       	brcc	.+14     	; 0x494 <DIO_vwrite_port_value+0x16>
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_vwrite_port_value+0x32>
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_vwrite_port_value+0x36>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_vwrite_port_value+0x3c>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_vwrite_port_value+0x2e>
 494:	82 36       	cpi	r24, 0x62	; 98
 496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_vwrite_port_value+0x32>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_vwrite_port_value+0x24>
 49c:	81 36       	cpi	r24, 0x61	; 97
 49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_vwrite_port_value+0x3c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_vwrite_port_value+0x2e>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_vwrite_port_value+0x36>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_vwrite_port_value+0x3c>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_vwrite_port_value+0x3a>
	{
		case 'A':
		case 'a':
		MY_PORTA = value;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret

		case 'B':
		case 'b':
		MY_PORTB = value;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret

		case 'C':
		case 'c':
		MY_PORTC = value;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret

		case 'D':
		case 'd':
		MY_PORTD = value;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <DIO_vtoggle_port>:
}

/********* toggle_port **************/
void DIO_vtoggle_port(char portname)
{
	switch(portname)
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	09 f1       	breq	.+66     	; 0x502 <DIO_vtoggle_port+0x46>
 4c0:	85 34       	cpi	r24, 0x45	; 69
 4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_vtoggle_port+0x16>
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	a9 f0       	breq	.+42     	; 0x4f2 <DIO_vtoggle_port+0x36>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	b8 f4       	brcc	.+46     	; 0x4fa <DIO_vtoggle_port+0x3e>
 4cc:	81 34       	cpi	r24, 0x41	; 65
 4ce:	e1 f4       	brne	.+56     	; 0x508 <DIO_vtoggle_port+0x4c>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_vtoggle_port+0x2e>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	71 f0       	breq	.+28     	; 0x4f2 <DIO_vtoggle_port+0x36>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_vtoggle_port+0x24>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	a9 f4       	brne	.+42     	; 0x508 <DIO_vtoggle_port+0x4c>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_vtoggle_port+0x2e>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	59 f0       	breq	.+22     	; 0x4fa <DIO_vtoggle_port+0x3e>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	81 f4       	brne	.+32     	; 0x508 <DIO_vtoggle_port+0x4c>
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <DIO_vtoggle_port+0x46>
	{
		case 'A':
		case 'a':
		MY_PORTA = ~MY_PORTA;
 4ea:	8b b3       	in	r24, 0x1b	; 27
 4ec:	80 95       	com	r24
 4ee:	8b bb       	out	0x1b, r24	; 27
		break;
 4f0:	08 95       	ret

		case 'B':
		case 'b':
		MY_PORTB = ~MY_PORTB;
 4f2:	88 b3       	in	r24, 0x18	; 24
 4f4:	80 95       	com	r24
 4f6:	88 bb       	out	0x18, r24	; 24
		break;
 4f8:	08 95       	ret

		case 'C':
		case 'c':
		MY_PORTC = ~MY_PORTC;
 4fa:	85 b3       	in	r24, 0x15	; 21
 4fc:	80 95       	com	r24
 4fe:	85 bb       	out	0x15, r24	; 21
		break;
 500:	08 95       	ret

		case 'D':
		case 'd':
		MY_PORTD = ~MY_PORTD;
 502:	82 b3       	in	r24, 0x12	; 18
 504:	80 95       	com	r24
 506:	82 bb       	out	0x12, r24	; 18
 508:	08 95       	ret

0000050a <DIO_u8read_port>:

/********* read_port **************/
unsigned char DIO_u8read_port(char portname)
{
	unsigned char read_value;
	switch(portname)
 50a:	84 34       	cpi	r24, 0x44	; 68
 50c:	d9 f0       	breq	.+54     	; 0x544 <DIO_u8read_port+0x3a>
 50e:	85 34       	cpi	r24, 0x45	; 69
 510:	38 f4       	brcc	.+14     	; 0x520 <DIO_u8read_port+0x16>
 512:	82 34       	cpi	r24, 0x42	; 66
 514:	99 f0       	breq	.+38     	; 0x53c <DIO_u8read_port+0x32>
 516:	83 34       	cpi	r24, 0x43	; 67
 518:	98 f4       	brcc	.+38     	; 0x540 <DIO_u8read_port+0x36>
 51a:	81 34       	cpi	r24, 0x41	; 65
 51c:	a1 f4       	brne	.+40     	; 0x546 <DIO_u8read_port+0x3c>
 51e:	0c c0       	rjmp	.+24     	; 0x538 <DIO_u8read_port+0x2e>
 520:	82 36       	cpi	r24, 0x62	; 98
 522:	61 f0       	breq	.+24     	; 0x53c <DIO_u8read_port+0x32>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	18 f4       	brcc	.+6      	; 0x52e <DIO_u8read_port+0x24>
 528:	81 36       	cpi	r24, 0x61	; 97
 52a:	69 f4       	brne	.+26     	; 0x546 <DIO_u8read_port+0x3c>
 52c:	05 c0       	rjmp	.+10     	; 0x538 <DIO_u8read_port+0x2e>
 52e:	83 36       	cpi	r24, 0x63	; 99
 530:	39 f0       	breq	.+14     	; 0x540 <DIO_u8read_port+0x36>
 532:	84 36       	cpi	r24, 0x64	; 100
 534:	41 f4       	brne	.+16     	; 0x546 <DIO_u8read_port+0x3c>
 536:	06 c0       	rjmp	.+12     	; 0x544 <DIO_u8read_port+0x3a>
	{
		case 'A':
		case 'a':
		read_value = MY_PINA;
 538:	99 b3       	in	r25, 0x19	; 25
		break;
 53a:	05 c0       	rjmp	.+10     	; 0x546 <DIO_u8read_port+0x3c>

		case 'B':
		case 'b':
		read_value = MY_PINB;
 53c:	96 b3       	in	r25, 0x16	; 22
		break;
 53e:	03 c0       	rjmp	.+6      	; 0x546 <DIO_u8read_port+0x3c>

		case 'C':
		case 'c':
		read_value = MY_PINC;
 540:	93 b3       	in	r25, 0x13	; 19
		break;
 542:	01 c0       	rjmp	.+2      	; 0x546 <DIO_u8read_port+0x3c>

		case 'D':
		case 'd':
		read_value = MY_PINC;
 544:	93 b3       	in	r25, 0x13	; 19
		break;
	}
	return read_value;
}
 546:	89 2f       	mov	r24, r25
 548:	08 95       	ret

0000054a <DIO_vinternal_pull_up_pin>:

/********* internal_pull up **************/
void DIO_vinternal_pull_up_pin(char portname , char pinnumber , char pud_enable)
{
	if (BIT_IS_CLR(MY_SFIOR,PUD))//check PUD(pull up disable pin is 0 (!0 true if) --> BIT_IS_CLR(MY_SFIOR,2)
 54a:	00 b6       	in	r0, 0x30	; 48
 54c:	02 fc       	sbrc	r0, 2
 54e:	90 c0       	rjmp	.+288    	; 0x670 <DIO_vinternal_pull_up_pin+0x126>
	{
		switch(portname)
 550:	84 34       	cpi	r24, 0x44	; 68
 552:	09 f4       	brne	.+2      	; 0x556 <DIO_vinternal_pull_up_pin+0xc>
 554:	71 c0       	rjmp	.+226    	; 0x638 <DIO_vinternal_pull_up_pin+0xee>
 556:	85 34       	cpi	r24, 0x45	; 69
 558:	48 f4       	brcc	.+18     	; 0x56c <DIO_vinternal_pull_up_pin+0x22>
 55a:	82 34       	cpi	r24, 0x42	; 66
 55c:	99 f1       	breq	.+102    	; 0x5c4 <DIO_vinternal_pull_up_pin+0x7a>
 55e:	83 34       	cpi	r24, 0x43	; 67
 560:	08 f0       	brcs	.+2      	; 0x564 <DIO_vinternal_pull_up_pin+0x1a>
 562:	4d c0       	rjmp	.+154    	; 0x5fe <DIO_vinternal_pull_up_pin+0xb4>
 564:	81 34       	cpi	r24, 0x41	; 65
 566:	09 f0       	breq	.+2      	; 0x56a <DIO_vinternal_pull_up_pin+0x20>
 568:	83 c0       	rjmp	.+262    	; 0x670 <DIO_vinternal_pull_up_pin+0x126>
 56a:	0f c0       	rjmp	.+30     	; 0x58a <DIO_vinternal_pull_up_pin+0x40>
 56c:	82 36       	cpi	r24, 0x62	; 98
 56e:	51 f1       	breq	.+84     	; 0x5c4 <DIO_vinternal_pull_up_pin+0x7a>
 570:	83 36       	cpi	r24, 0x63	; 99
 572:	20 f4       	brcc	.+8      	; 0x57c <DIO_vinternal_pull_up_pin+0x32>
 574:	81 36       	cpi	r24, 0x61	; 97
 576:	09 f0       	breq	.+2      	; 0x57a <DIO_vinternal_pull_up_pin+0x30>
 578:	7b c0       	rjmp	.+246    	; 0x670 <DIO_vinternal_pull_up_pin+0x126>
 57a:	07 c0       	rjmp	.+14     	; 0x58a <DIO_vinternal_pull_up_pin+0x40>
 57c:	83 36       	cpi	r24, 0x63	; 99
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_vinternal_pull_up_pin+0x38>
 580:	3e c0       	rjmp	.+124    	; 0x5fe <DIO_vinternal_pull_up_pin+0xb4>
 582:	84 36       	cpi	r24, 0x64	; 100
 584:	09 f0       	breq	.+2      	; 0x588 <DIO_vinternal_pull_up_pin+0x3e>
 586:	74 c0       	rjmp	.+232    	; 0x670 <DIO_vinternal_pull_up_pin+0x126>
 588:	57 c0       	rjmp	.+174    	; 0x638 <DIO_vinternal_pull_up_pin+0xee>
		{
			case 'A':
			case 'a':
			if (pud_enable == 1)
 58a:	41 30       	cpi	r20, 0x01	; 1
 58c:	69 f4       	brne	.+26     	; 0x5a8 <DIO_vinternal_pull_up_pin+0x5e>
			{
				SET_BIT(MY_PORTA,pinnumber);
 58e:	2b b3       	in	r18, 0x1b	; 27
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	ac 01       	movw	r20, r24
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_vinternal_pull_up_pin+0x52>
 598:	44 0f       	add	r20, r20
 59a:	55 1f       	adc	r21, r21
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_vinternal_pull_up_pin+0x4e>
 5a0:	ba 01       	movw	r22, r20
 5a2:	62 2b       	or	r22, r18
 5a4:	6b bb       	out	0x1b, r22	; 27
 5a6:	08 95       	ret
			}
			else
			{
				CLR_BIT(MY_PORTA,pinnumber);
 5a8:	2b b3       	in	r18, 0x1b	; 27
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	ac 01       	movw	r20, r24
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_vinternal_pull_up_pin+0x6c>
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_vinternal_pull_up_pin+0x68>
 5ba:	ba 01       	movw	r22, r20
 5bc:	60 95       	com	r22
 5be:	62 23       	and	r22, r18
 5c0:	6b bb       	out	0x1b, r22	; 27
 5c2:	08 95       	ret
			}
			break;

			case 'B':
			case 'b':
			if (pud_enable == 1)
 5c4:	41 30       	cpi	r20, 0x01	; 1
 5c6:	69 f4       	brne	.+26     	; 0x5e2 <DIO_vinternal_pull_up_pin+0x98>
			{
				SET_BIT(MY_PORTB,pinnumber);
 5c8:	28 b3       	in	r18, 0x18	; 24
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_vinternal_pull_up_pin+0x8c>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_vinternal_pull_up_pin+0x88>
 5da:	ba 01       	movw	r22, r20
 5dc:	62 2b       	or	r22, r18
 5de:	68 bb       	out	0x18, r22	; 24
 5e0:	08 95       	ret
			}
			else
			{
				CLR_BIT(MY_PORTB,pinnumber);
 5e2:	28 b3       	in	r18, 0x18	; 24
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	ac 01       	movw	r20, r24
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_vinternal_pull_up_pin+0xa6>
 5ec:	44 0f       	add	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_vinternal_pull_up_pin+0xa2>
 5f4:	ba 01       	movw	r22, r20
 5f6:	60 95       	com	r22
 5f8:	62 23       	and	r22, r18
 5fa:	68 bb       	out	0x18, r22	; 24
 5fc:	08 95       	ret
			}
			break;

			case 'C':
			case 'c':
			if (pud_enable == 1)
 5fe:	41 30       	cpi	r20, 0x01	; 1
 600:	69 f4       	brne	.+26     	; 0x61c <DIO_vinternal_pull_up_pin+0xd2>
			{
				SET_BIT(MY_PORTC,pinnumber);
 602:	25 b3       	in	r18, 0x15	; 21
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	ac 01       	movw	r20, r24
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_vinternal_pull_up_pin+0xc6>
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_vinternal_pull_up_pin+0xc2>
 614:	ba 01       	movw	r22, r20
 616:	62 2b       	or	r22, r18
 618:	65 bb       	out	0x15, r22	; 21
 61a:	08 95       	ret
			}
			else
			{
				CLR_BIT(MY_PORTC,pinnumber);
 61c:	25 b3       	in	r18, 0x15	; 21
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	ac 01       	movw	r20, r24
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_vinternal_pull_up_pin+0xe0>
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_vinternal_pull_up_pin+0xdc>
 62e:	ba 01       	movw	r22, r20
 630:	60 95       	com	r22
 632:	62 23       	and	r22, r18
 634:	65 bb       	out	0x15, r22	; 21
 636:	08 95       	ret
			}
			break;

			case 'D':
			case 'd':
			if (pud_enable == 1)
 638:	41 30       	cpi	r20, 0x01	; 1
 63a:	69 f4       	brne	.+26     	; 0x656 <DIO_vinternal_pull_up_pin+0x10c>
			{
				SET_BIT(MY_PORTD,pinnumber);
 63c:	22 b3       	in	r18, 0x12	; 18
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	ac 01       	movw	r20, r24
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_vinternal_pull_up_pin+0x100>
 646:	44 0f       	add	r20, r20
 648:	55 1f       	adc	r21, r21
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_vinternal_pull_up_pin+0xfc>
 64e:	ba 01       	movw	r22, r20
 650:	62 2b       	or	r22, r18
 652:	62 bb       	out	0x12, r22	; 18
 654:	08 95       	ret
			}
			else
			{
				CLR_BIT(MY_PORTD,pinnumber);
 656:	22 b3       	in	r18, 0x12	; 18
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	ac 01       	movw	r20, r24
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_vinternal_pull_up_pin+0x11a>
 660:	44 0f       	add	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	6a 95       	dec	r22
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_vinternal_pull_up_pin+0x116>
 668:	ba 01       	movw	r22, r20
 66a:	60 95       	com	r22
 66c:	62 23       	and	r22, r18
 66e:	62 bb       	out	0x12, r22	; 18
 670:	08 95       	ret

00000672 <DIO_vlow_nibble_write>:
}


/************** low nibble **************/
void DIO_vlow_nibble_write (char portname , char val)
{
 672:	0f 93       	push	r16
 674:	1f 93       	push	r17
 676:	cf 93       	push	r28
 678:	c8 2f       	mov	r28, r24
 67a:	06 2f       	mov	r16, r22
	DIO_vwrite_pin_value(portname,0,READ_BIT(val,0));
 67c:	46 2f       	mov	r20, r22
 67e:	41 70       	andi	r20, 0x01	; 1
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	DIO_vwrite_pin_value(portname,1,READ_BIT(val,1));
 686:	10 e0       	ldi	r17, 0x00	; 0
 688:	a8 01       	movw	r20, r16
 68a:	42 70       	andi	r20, 0x02	; 2
 68c:	50 70       	andi	r21, 0x00	; 0
 68e:	55 95       	asr	r21
 690:	47 95       	ror	r20
 692:	8c 2f       	mov	r24, r28
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	DIO_vwrite_pin_value(portname,2,READ_BIT(val,2));
 69a:	a8 01       	movw	r20, r16
 69c:	44 70       	andi	r20, 0x04	; 4
 69e:	50 70       	andi	r21, 0x00	; 0
 6a0:	55 95       	asr	r21
 6a2:	47 95       	ror	r20
 6a4:	55 95       	asr	r21
 6a6:	47 95       	ror	r20
 6a8:	8c 2f       	mov	r24, r28
 6aa:	62 e0       	ldi	r22, 0x02	; 2
 6ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	DIO_vwrite_pin_value(portname,3,READ_BIT(val,3));
 6b0:	08 70       	andi	r16, 0x08	; 8
 6b2:	10 70       	andi	r17, 0x00	; 0
 6b4:	a8 01       	movw	r20, r16
 6b6:	55 95       	asr	r21
 6b8:	47 95       	ror	r20
 6ba:	55 95       	asr	r21
 6bc:	47 95       	ror	r20
 6be:	55 95       	asr	r21
 6c0:	47 95       	ror	r20
 6c2:	8c 2f       	mov	r24, r28
 6c4:	63 e0       	ldi	r22, 0x03	; 3
 6c6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
		MY_PORTD &= 0xf0;
		MY_PORTD |= val;
		break;
	}
	*/
}
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	08 95       	ret

000006d2 <DIO_vhigh_nibble_write>:

/************** high nibble **************/
void DIO_vhigh_nibble_write (char portname , char val) //val of BCD need least four bit  0x0__
{
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	c8 2f       	mov	r28, r24
 6da:	06 2f       	mov	r16, r22
	DIO_vwrite_pin_value(portname,4,READ_BIT(val,0));
 6dc:	46 2f       	mov	r20, r22
 6de:	41 70       	andi	r20, 0x01	; 1
 6e0:	64 e0       	ldi	r22, 0x04	; 4
 6e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	DIO_vwrite_pin_value(portname,5,READ_BIT(val,1));
 6e6:	10 e0       	ldi	r17, 0x00	; 0
 6e8:	a8 01       	movw	r20, r16
 6ea:	42 70       	andi	r20, 0x02	; 2
 6ec:	50 70       	andi	r21, 0x00	; 0
 6ee:	55 95       	asr	r21
 6f0:	47 95       	ror	r20
 6f2:	8c 2f       	mov	r24, r28
 6f4:	65 e0       	ldi	r22, 0x05	; 5
 6f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	DIO_vwrite_pin_value(portname,6,READ_BIT(val,2));
 6fa:	a8 01       	movw	r20, r16
 6fc:	44 70       	andi	r20, 0x04	; 4
 6fe:	50 70       	andi	r21, 0x00	; 0
 700:	55 95       	asr	r21
 702:	47 95       	ror	r20
 704:	55 95       	asr	r21
 706:	47 95       	ror	r20
 708:	8c 2f       	mov	r24, r28
 70a:	66 e0       	ldi	r22, 0x06	; 6
 70c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	DIO_vwrite_pin_value(portname,7,READ_BIT(val,3));
 710:	08 70       	andi	r16, 0x08	; 8
 712:	10 70       	andi	r17, 0x00	; 0
 714:	a8 01       	movw	r20, r16
 716:	55 95       	asr	r21
 718:	47 95       	ror	r20
 71a:	55 95       	asr	r21
 71c:	47 95       	ror	r20
 71e:	55 95       	asr	r21
 720:	47 95       	ror	r20
 722:	8c 2f       	mov	r24, r28
 724:	67 e0       	ldi	r22, 0x07	; 7
 726:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
		MY_PORTD &= 0xf0;
		MY_PORTD |= val;
		break;
	}
	*/
}
 72a:	cf 91       	pop	r28
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	08 95       	ret

00000732 <EEPROM_vwrite>:
#include "standard_macros.h"
/***************** Write On EEPROM **************/
void EEPROM_vwrite (const unsigned short address , unsigned char val)
{
	/****** load address *********/
	MY_EEARL = (char)address;
 732:	8e bb       	out	0x1e, r24	; 30
	MY_EEARH = (char)(address >> 8);
 734:	9f bb       	out	0x1f, r25	; 31
	/****** load address *********/
	MY_EEDR = val;
 736:	6d bb       	out	0x1d, r22	; 29
	/****** enable write *********/
	SET_BIT(MY_EECR , MY_EEMWE);
 738:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(MY_EECR , MY_EEWE );
 73a:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(MY_EECR , MY_EEWE) == 1); // looping until finish write
 73c:	e1 99       	sbic	0x1c, 1	; 28
 73e:	fe cf       	rjmp	.-4      	; 0x73c <EEPROM_vwrite+0xa>
}
 740:	08 95       	ret

00000742 <EEPROM_u8read>:

/***************** erad from EEPROM **************/
unsigned char EEPROM_u8read (const unsigned short address)
{
	/****** load address *********/
	MY_EEAR = address;
 742:	9f bb       	out	0x1f, r25	; 31
 744:	8e bb       	out	0x1e, r24	; 30
	/****** enable write *********/
	SET_BIT(MY_EECR , MY_EERE);
 746:	e0 9a       	sbi	0x1c, 0	; 28
	/****** return value *********/
	return MY_EEDR;
 748:	8d b3       	in	r24, 0x1d	; 29
}
 74a:	08 95       	ret

0000074c <Keybad_vinit>:
#define portname 'c'
#define NOT_PRESSED 0xff

void Keybad_vinit (void)
{
	DIO_vset_port_direction(portname , 0x0f);
 74c:	83 e6       	ldi	r24, 0x63	; 99
 74e:	6f e0       	ldi	r22, 0x0F	; 15
 750:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vset_port_direction>
	DIO_vinternal_pull_up_pin(portname , 4 , 1);//pin_portname default is 1111 
 754:	83 e6       	ldi	r24, 0x63	; 99
 756:	64 e0       	ldi	r22, 0x04	; 4
 758:	41 e0       	ldi	r20, 0x01	; 1
 75a:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_vinternal_pull_up_pin>
	DIO_vinternal_pull_up_pin(portname , 5 , 1);
 75e:	83 e6       	ldi	r24, 0x63	; 99
 760:	65 e0       	ldi	r22, 0x05	; 5
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_vinternal_pull_up_pin>
	DIO_vinternal_pull_up_pin(portname , 6 , 1);
 768:	83 e6       	ldi	r24, 0x63	; 99
 76a:	66 e0       	ldi	r22, 0x06	; 6
 76c:	41 e0       	ldi	r20, 0x01	; 1
 76e:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_vinternal_pull_up_pin>
	DIO_vinternal_pull_up_pin(portname , 7 , 1);	
 772:	83 e6       	ldi	r24, 0x63	; 99
 774:	67 e0       	ldi	r22, 0x07	; 7
 776:	41 e0       	ldi	r20, 0x01	; 1
 778:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_vinternal_pull_up_pin>
}
 77c:	08 95       	ret

0000077e <Keybad_u8read>:

unsigned char Keybad_u8read(void)
{
 77e:	ff 92       	push	r15
 780:	0f 93       	push	r16
 782:	1f 93       	push	r17
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	60 97       	sbiw	r28, 0x10	; 16
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
	char keybad[4][4] = { {'7','8','9','/'} , {'4','5','6','*'} , {'1','2','3','-'} , {'A','0','=','+'} };
 798:	de 01       	movw	r26, r28
 79a:	11 96       	adiw	r26, 0x01	; 1
 79c:	e0 e6       	ldi	r30, 0x60	; 96
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 e1       	ldi	r24, 0x10	; 16
 7a2:	01 90       	ld	r0, Z+
 7a4:	0d 92       	st	X+, r0
 7a6:	81 50       	subi	r24, 0x01	; 1
 7a8:	e1 f7       	brne	.-8      	; 0x7a2 <Keybad_u8read+0x24>
	char row , column , x ;
	char retval = NOT_PRESSED;
	for (row=0 ; row<4 ; row++)
 7aa:	ff 24       	eor	r15, r15
	{
		DIO_vwrite_pin_value(portname , 0 , 1);
 7ac:	83 e6       	ldi	r24, 0x63	; 99
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	41 e0       	ldi	r20, 0x01	; 1
 7b2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
		DIO_vwrite_pin_value(portname , 1 , 1);
 7b6:	83 e6       	ldi	r24, 0x63	; 99
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
		DIO_vwrite_pin_value(portname , 2 , 1);
 7c0:	83 e6       	ldi	r24, 0x63	; 99
 7c2:	62 e0       	ldi	r22, 0x02	; 2
 7c4:	41 e0       	ldi	r20, 0x01	; 1
 7c6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
		DIO_vwrite_pin_value(portname , 3 , 1);
 7ca:	83 e6       	ldi	r24, 0x63	; 99
 7cc:	63 e0       	ldi	r22, 0x03	; 3
 7ce:	41 e0       	ldi	r20, 0x01	; 1
 7d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
		DIO_vwrite_pin_value(portname , row , 0);
 7d4:	83 e6       	ldi	r24, 0x63	; 99
 7d6:	6f 2d       	mov	r22, r15
 7d8:	40 e0       	ldi	r20, 0x00	; 0
 7da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
		for (column=0 ; column<4 ; column++)
 7de:	10 e0       	ldi	r17, 0x00	; 0
		{
			x=DIO_u8read_pin(portname , column+4);
 7e0:	01 2f       	mov	r16, r17
 7e2:	0c 5f       	subi	r16, 0xFC	; 252
 7e4:	83 e6       	ldi	r24, 0x63	; 99
 7e6:	60 2f       	mov	r22, r16
 7e8:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8read_pin>
			if (x == 0)
 7ec:	88 23       	and	r24, r24
 7ee:	91 f4       	brne	.+36     	; 0x814 <Keybad_u8read+0x96>
			{
				retval = keybad[row][column];
 7f0:	ef 2d       	mov	r30, r15
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	ee 0f       	add	r30, r30
 7f6:	ff 1f       	adc	r31, r31
 7f8:	ee 0f       	add	r30, r30
 7fa:	ff 1f       	adc	r31, r31
 7fc:	e1 0f       	add	r30, r17
 7fe:	f1 1d       	adc	r31, r1
 800:	ec 0f       	add	r30, r28
 802:	fd 1f       	adc	r31, r29
 804:	11 81       	ldd	r17, Z+1	; 0x01
				while(DIO_u8read_pin(portname , column+4) == 0);//continuous pressed
 806:	83 e6       	ldi	r24, 0x63	; 99
 808:	60 2f       	mov	r22, r16
 80a:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8read_pin>
 80e:	88 23       	and	r24, r24
 810:	d1 f3       	breq	.-12     	; 0x806 <Keybad_u8read+0x88>
 812:	04 c0       	rjmp	.+8      	; 0x81c <Keybad_u8read+0x9e>
		DIO_vwrite_pin_value(portname , 0 , 1);
		DIO_vwrite_pin_value(portname , 1 , 1);
		DIO_vwrite_pin_value(portname , 2 , 1);
		DIO_vwrite_pin_value(portname , 3 , 1);
		DIO_vwrite_pin_value(portname , row , 0);
		for (column=0 ; column<4 ; column++)
 814:	1f 5f       	subi	r17, 0xFF	; 255
 816:	14 30       	cpi	r17, 0x04	; 4
 818:	19 f7       	brne	.-58     	; 0x7e0 <Keybad_u8read+0x62>
 81a:	0d c0       	rjmp	.+26     	; 0x836 <Keybad_u8read+0xb8>
			break;
		}
		
	}
	return retval;
 81c:	81 2f       	mov	r24, r17
 81e:	60 96       	adiw	r28, 0x10	; 16
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	f8 94       	cli
 824:	de bf       	out	0x3e, r29	; 62
 826:	0f be       	out	0x3f, r0	; 63
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	08 95       	ret
unsigned char Keybad_u8read(void)
{
	char keybad[4][4] = { {'7','8','9','/'} , {'4','5','6','*'} , {'1','2','3','-'} , {'A','0','=','+'} };
	char row , column , x ;
	char retval = NOT_PRESSED;
	for (row=0 ; row<4 ; row++)
 836:	f3 94       	inc	r15
 838:	84 e0       	ldi	r24, 0x04	; 4
 83a:	f8 16       	cp	r15, r24
 83c:	09 f0       	breq	.+2      	; 0x840 <Keybad_u8read+0xc2>
 83e:	b6 cf       	rjmp	.-148    	; 0x7ac <Keybad_u8read+0x2e>
 840:	1f ef       	ldi	r17, 0xFF	; 255
 842:	ec cf       	rjmp	.-40     	; 0x81c <Keybad_u8read+0x9e>

00000844 <Enable_bit>:
	
}
/********* pulse_enable_lcd ********/
static void Enable_bit (void)
{
	DIO_vwrite_pin_value(portname_control , EN , 1);
 844:	82 e6       	ldi	r24, 0x62	; 98
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	41 e0       	ldi	r20, 0x01	; 1
 84a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 84e:	8f e9       	ldi	r24, 0x9F	; 159
 850:	9f e0       	ldi	r25, 0x0F	; 15
 852:	01 97       	sbiw	r24, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <Enable_bit+0xe>
 856:	00 c0       	rjmp	.+0      	; 0x858 <Enable_bit+0x14>
 858:	00 00       	nop
	_delay_ms(2);
	DIO_vwrite_pin_value(portname_control , EN , 0);
 85a:	82 e6       	ldi	r24, 0x62	; 98
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
 864:	8f e9       	ldi	r24, 0x9F	; 159
 866:	9f e0       	ldi	r25, 0x0F	; 15
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
 86e:	00 00       	nop
	_delay_ms(2);
}
 870:	08 95       	ret

00000872 <LCD_vinit>:

/********************************* driver_LCD **************************************/

/********* initialization_lcd ********/
void LCD_vinit()
{
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	90 e7       	ldi	r25, 0x70	; 112
 87a:	a2 e0       	ldi	r26, 0x02	; 2
 87c:	81 50       	subi	r24, 0x01	; 1
 87e:	90 40       	sbci	r25, 0x00	; 0
 880:	a0 40       	sbci	r26, 0x00	; 0
 882:	e1 f7       	brne	.-8      	; 0x87c <LCD_vinit+0xa>
 884:	00 c0       	rjmp	.+0      	; 0x886 <LCD_vinit+0x14>
 886:	00 00       	nop
	LCD_vsend_cmd(Entry_Mode_increase_AC_no_shift);//increase cursor step
	_delay_ms(10);
	
	/******* 4-bit mode ********/
	#elif defined Four_Bit_Mode
	DIO_vset_pin_direction(portname_dataline , pin_nibble   , 1);
 888:	81 e6       	ldi	r24, 0x61	; 97
 88a:	64 e0       	ldi	r22, 0x04	; 4
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pin_direction>
	DIO_vset_pin_direction(portname_dataline , pin_nibble+1 , 1);
 892:	81 e6       	ldi	r24, 0x61	; 97
 894:	65 e0       	ldi	r22, 0x05	; 5
 896:	41 e0       	ldi	r20, 0x01	; 1
 898:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pin_direction>
	DIO_vset_pin_direction(portname_dataline , pin_nibble+2 , 1);
 89c:	81 e6       	ldi	r24, 0x61	; 97
 89e:	66 e0       	ldi	r22, 0x06	; 6
 8a0:	41 e0       	ldi	r20, 0x01	; 1
 8a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pin_direction>
	DIO_vset_pin_direction(portname_dataline , pin_nibble+2 , 1);
 8a6:	81 e6       	ldi	r24, 0x61	; 97
 8a8:	66 e0       	ldi	r22, 0x06	; 6
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pin_direction>
	DIO_vset_pin_direction(portname_control   , EN , 1);
 8b0:	82 e6       	ldi	r24, 0x62	; 98
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	41 e0       	ldi	r20, 0x01	; 1
 8b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pin_direction>
	DIO_vset_pin_direction(portname_control   , RW , 1);
 8ba:	82 e6       	ldi	r24, 0x62	; 98
 8bc:	61 e0       	ldi	r22, 0x01	; 1
 8be:	41 e0       	ldi	r20, 0x01	; 1
 8c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pin_direction>
	DIO_vset_pin_direction(portname_control   , RS , 1);
 8c4:	82 e6       	ldi	r24, 0x62	; 98
 8c6:	62 e0       	ldi	r22, 0x02	; 2
 8c8:	41 e0       	ldi	r20, 0x01	; 1
 8ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pin_direction>
	// enable write on lcd
	DIO_vwrite_pin_value(portname_control , RW , 0);
 8ce:	82 e6       	ldi	r24, 0x62	; 98
 8d0:	61 e0       	ldi	r22, 0x01	; 1
 8d2:	40 e0       	ldi	r20, 0x00	; 0
 8d4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	// command instructions
	LCD_vsend_cmd(Return_Home); //return home
 8d8:	c5 ed       	ldi	r28, 0xD5	; 213
 8da:	d4 e0       	ldi	r29, 0x04	; 4
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	fe 01       	movw	r30, r28
 8e2:	09 95       	icall
 8e4:	af e1       	ldi	r26, 0x1F	; 31
 8e6:	be e4       	ldi	r27, 0x4E	; 78
 8e8:	11 97       	sbiw	r26, 0x01	; 1
 8ea:	f1 f7       	brne	.-4      	; 0x8e8 <LCD_vinit+0x76>
 8ec:	00 c0       	rjmp	.+0      	; 0x8ee <LCD_vinit+0x7c>
 8ee:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(Four_Bit);//4bit-mode
 8f0:	88 e2       	ldi	r24, 0x28	; 40
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	fe 01       	movw	r30, r28
 8f6:	09 95       	icall
 8f8:	8f e1       	ldi	r24, 0x1F	; 31
 8fa:	9e e4       	ldi	r25, 0x4E	; 78
 8fc:	01 97       	sbiw	r24, 0x01	; 1
 8fe:	f1 f7       	brne	.-4      	; 0x8fc <LCD_vinit+0x8a>
 900:	00 c0       	rjmp	.+0      	; 0x902 <LCD_vinit+0x90>
 902:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(Disblay_On_Cursor_Off);//appear cursor and display
 904:	8c e0       	ldi	r24, 0x0C	; 12
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	fe 01       	movw	r30, r28
 90a:	09 95       	icall
 90c:	af e1       	ldi	r26, 0x1F	; 31
 90e:	be e4       	ldi	r27, 0x4E	; 78
 910:	11 97       	sbiw	r26, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <LCD_vinit+0x9e>
 914:	00 c0       	rjmp	.+0      	; 0x916 <LCD_vinit+0xa4>
 916:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(Clear_Screen);//clear lcd
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	fe 01       	movw	r30, r28
 91e:	09 95       	icall
 920:	8f e1       	ldi	r24, 0x1F	; 31
 922:	9e e4       	ldi	r25, 0x4E	; 78
 924:	01 97       	sbiw	r24, 0x01	; 1
 926:	f1 f7       	brne	.-4      	; 0x924 <LCD_vinit+0xb2>
 928:	00 c0       	rjmp	.+0      	; 0x92a <LCD_vinit+0xb8>
 92a:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(Entry_Mode_increase_AC_no_shift);//increase cursor step
 92c:	86 e0       	ldi	r24, 0x06	; 6
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	fe 01       	movw	r30, r28
 932:	09 95       	icall
 934:	af e1       	ldi	r26, 0x1F	; 31
 936:	be e4       	ldi	r27, 0x4E	; 78
 938:	11 97       	sbiw	r26, 0x01	; 1
 93a:	f1 f7       	brne	.-4      	; 0x938 <LCD_vinit+0xc6>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <LCD_vinit+0xcc>
 93e:	00 00       	nop
	_delay_ms(10);
	#endif
	
}
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	08 95       	ret

00000946 <LCD_vsend_char>:
	_delay_ms(2);
}

/********* send_char_lcd ********/
void LCD_vsend_char(char char_send)
{
 946:	cf 93       	push	r28
 948:	c8 2f       	mov	r28, r24
	Enable_bit();
	
	/******* 4-bit mode ********/
	#elif defined Four_Bit_Mode
	//send MSB
	DIO_vhigh_nibble_write(portname_dataline , char_send >> 4);
 94a:	68 2f       	mov	r22, r24
 94c:	62 95       	swap	r22
 94e:	6f 70       	andi	r22, 0x0F	; 15
 950:	81 e6       	ldi	r24, 0x61	; 97
 952:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_vhigh_nibble_write>
	DIO_vwrite_pin_value(portname_control , RS , 1);
 956:	82 e6       	ldi	r24, 0x62	; 98
 958:	62 e0       	ldi	r22, 0x02	; 2
 95a:	41 e0       	ldi	r20, 0x01	; 1
 95c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	Enable_bit();
 960:	0e 94 22 04 	call	0x844	; 0x844 <Enable_bit>
	//send LSB
	DIO_vhigh_nibble_write(portname_dataline , char_send);
 964:	81 e6       	ldi	r24, 0x61	; 97
 966:	6c 2f       	mov	r22, r28
 968:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_vhigh_nibble_write>
	DIO_vwrite_pin_value(portname_control , RS , 1);
 96c:	82 e6       	ldi	r24, 0x62	; 98
 96e:	62 e0       	ldi	r22, 0x02	; 2
 970:	41 e0       	ldi	r20, 0x01	; 1
 972:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	Enable_bit();
 976:	0e 94 22 04 	call	0x844	; 0x844 <Enable_bit>
 97a:	8f e1       	ldi	r24, 0x1F	; 31
 97c:	9e e4       	ldi	r25, 0x4E	; 78
 97e:	01 97       	sbiw	r24, 0x01	; 1
 980:	f1 f7       	brne	.-4      	; 0x97e <LCD_vsend_char+0x38>
 982:	00 c0       	rjmp	.+0      	; 0x984 <LCD_vsend_char+0x3e>
 984:	00 00       	nop
	#endif
	_delay_ms(10);
}
 986:	cf 91       	pop	r28
 988:	08 95       	ret

0000098a <LCD_u8read_busy_flag>:

/************** busy_flag ******************/
unsigned char LCD_u8read_busy_flag(void)
{
	DIO_vwrite_pin_value(portname_control , RW , 1);
 98a:	82 e6       	ldi	r24, 0x62	; 98
 98c:	61 e0       	ldi	r22, 0x01	; 1
 98e:	41 e0       	ldi	r20, 0x01	; 1
 990:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	DIO_vwrite_pin_value(portname_control , RS , 0);
 994:	82 e6       	ldi	r24, 0x62	; 98
 996:	62 e0       	ldi	r22, 0x02	; 2
 998:	40 e0       	ldi	r20, 0x00	; 0
 99a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	while(BIT_IS_SET(portname_dataline , 7));
	DIO_vwrite_pin_value(portname_control , RW , 0);
 99e:	82 e6       	ldi	r24, 0x62	; 98
 9a0:	61 e0       	ldi	r22, 0x01	; 1
 9a2:	40 e0       	ldi	r20, 0x00	; 0
 9a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
}
 9a8:	08 95       	ret

000009aa <LCD_vsend_cmd>:

/********* send_command_lcd ********/
void LCD_vsend_cmd(char cmd_send)
{
 9aa:	cf 93       	push	r28
 9ac:	c8 2f       	mov	r28, r24
	Enable_bit();
	
	/******* 4-bit mode ********/
	#elif defined Four_Bit_Mode
	//send MSB
	DIO_vhigh_nibble_write(portname_dataline , cmd_send >> 4);
 9ae:	68 2f       	mov	r22, r24
 9b0:	62 95       	swap	r22
 9b2:	6f 70       	andi	r22, 0x0F	; 15
 9b4:	81 e6       	ldi	r24, 0x61	; 97
 9b6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_vhigh_nibble_write>
	DIO_vwrite_pin_value(portname_control , RS , 0);
 9ba:	82 e6       	ldi	r24, 0x62	; 98
 9bc:	62 e0       	ldi	r22, 0x02	; 2
 9be:	40 e0       	ldi	r20, 0x00	; 0
 9c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	Enable_bit();
 9c4:	0e 94 22 04 	call	0x844	; 0x844 <Enable_bit>
	//send LSB
	DIO_vhigh_nibble_write(portname_dataline , cmd_send);
 9c8:	81 e6       	ldi	r24, 0x61	; 97
 9ca:	6c 2f       	mov	r22, r28
 9cc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_vhigh_nibble_write>
	DIO_vwrite_pin_value(portname_control , RS , 0);
 9d0:	82 e6       	ldi	r24, 0x62	; 98
 9d2:	62 e0       	ldi	r22, 0x02	; 2
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
	Enable_bit();
 9da:	0e 94 22 04 	call	0x844	; 0x844 <Enable_bit>
	#endif
	LCD_u8read_busy_flag();
 9de:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_u8read_busy_flag>
	//_delay_ms(10);
}
 9e2:	cf 91       	pop	r28
 9e4:	08 95       	ret

000009e6 <LCD_vsend_string>:


/********* send_string_lcd ********/
void LCD_vsend_string(char *ptr)
{
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	ec 01       	movw	r28, r24
	while(*ptr != 0)
 9ec:	88 81       	ld	r24, Y
 9ee:	88 23       	and	r24, r24
 9f0:	31 f0       	breq	.+12     	; 0x9fe <LCD_vsend_string+0x18>
	//_delay_ms(10);
}


/********* send_string_lcd ********/
void LCD_vsend_string(char *ptr)
 9f2:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr != 0)
	{
		LCD_vsend_char(*ptr);
 9f4:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vsend_char>


/********* send_string_lcd ********/
void LCD_vsend_string(char *ptr)
{
	while(*ptr != 0)
 9f8:	89 91       	ld	r24, Y+
 9fa:	88 23       	and	r24, r24
 9fc:	d9 f7       	brne	.-10     	; 0x9f4 <LCD_vsend_string+0xe>
 9fe:	8f e1       	ldi	r24, 0x1F	; 31
 a00:	9e e4       	ldi	r25, 0x4E	; 78
 a02:	01 97       	sbiw	r24, 0x01	; 1
 a04:	f1 f7       	brne	.-4      	; 0xa02 <LCD_vsend_string+0x1c>
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <LCD_vsend_string+0x22>
 a08:	00 00       	nop
	{
		LCD_vsend_char(*ptr);
		ptr++;
	}
	_delay_ms(10);
}
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	08 95       	ret

00000a10 <LCD_vClearScreen>:

/*********** clear_lcd **********/
void LCD_vClearScreen(void)
{
	LCD_vsend_cmd(Clear_Screen);
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_vsend_cmd>
 a16:	8f e1       	ldi	r24, 0x1F	; 31
 a18:	9e e4       	ldi	r25, 0x4E	; 78
 a1a:	01 97       	sbiw	r24, 0x01	; 1
 a1c:	f1 f7       	brne	.-4      	; 0xa1a <LCD_vClearScreen+0xa>
 a1e:	00 c0       	rjmp	.+0      	; 0xa20 <LCD_vClearScreen+0x10>
 a20:	00 00       	nop
	_delay_ms(10);
}
 a22:	08 95       	ret

00000a24 <LCD_vmove_cursor>:

/********* move_cursor_lcd ********/
void LCD_vmove_cursor (char row , char column)
{
	char cmd;
	if (row>2 || row<1  ||  column>16 || column<1)
 a24:	28 2f       	mov	r18, r24
 a26:	21 50       	subi	r18, 0x01	; 1
 a28:	22 30       	cpi	r18, 0x02	; 2
 a2a:	70 f4       	brcc	.+28     	; 0xa48 <LCD_vmove_cursor+0x24>
 a2c:	61 31       	cpi	r22, 0x11	; 17
 a2e:	70 f4       	brcc	.+28     	; 0xa4c <LCD_vmove_cursor+0x28>
 a30:	66 23       	and	r22, r22
 a32:	71 f0       	breq	.+28     	; 0xa50 <LCD_vmove_cursor+0x2c>
	{
		cmd = 0x80;
	} 
	else if(row == 1)
 a34:	81 30       	cpi	r24, 0x01	; 1
 a36:	19 f4       	brne	.+6      	; 0xa3e <LCD_vmove_cursor+0x1a>
	{
		cmd = (0x80 + column -1);
 a38:	96 2f       	mov	r25, r22
 a3a:	91 58       	subi	r25, 0x81	; 129
 a3c:	0a c0       	rjmp	.+20     	; 0xa52 <LCD_vmove_cursor+0x2e>
	}
	else if (row == 2)
 a3e:	82 30       	cpi	r24, 0x02	; 2
 a40:	41 f4       	brne	.+16     	; 0xa52 <LCD_vmove_cursor+0x2e>
	{
		cmd = (0xC0 + column -1);
 a42:	96 2f       	mov	r25, r22
 a44:	91 54       	subi	r25, 0x41	; 65
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <LCD_vmove_cursor+0x2e>
void LCD_vmove_cursor (char row , char column)
{
	char cmd;
	if (row>2 || row<1  ||  column>16 || column<1)
	{
		cmd = 0x80;
 a48:	90 e8       	ldi	r25, 0x80	; 128
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <LCD_vmove_cursor+0x2e>
 a4c:	90 e8       	ldi	r25, 0x80	; 128
 a4e:	01 c0       	rjmp	.+2      	; 0xa52 <LCD_vmove_cursor+0x2e>
 a50:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row == 2)
	{
		cmd = (0xC0 + column -1);
	}
	LCD_vsend_cmd(cmd);
 a52:	89 2f       	mov	r24, r25
 a54:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_vsend_cmd>
 a58:	8f e1       	ldi	r24, 0x1F	; 31
 a5a:	9e e4       	ldi	r25, 0x4E	; 78
 a5c:	01 97       	sbiw	r24, 0x01	; 1
 a5e:	f1 f7       	brne	.-4      	; 0xa5c <LCD_vmove_cursor+0x38>
 a60:	00 c0       	rjmp	.+0      	; 0xa62 <LCD_vmove_cursor+0x3e>
 a62:	00 00       	nop
	_delay_ms(10);
}
 a64:	08 95       	ret

00000a66 <LED_vinit_pin>:
#include "dio.h"

/*************** initi led *****************/
void LED_vinit_pin (char portname , char pinnumber)
{
	DIO_vset_pin_direction(portname , pinnumber , 1);
 a66:	41 e0       	ldi	r20, 0x01	; 1
 a68:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pin_direction>
}
 a6c:	08 95       	ret

00000a6e <LED_vinit_port>:

/*************** initi led port *****************/
void LED_vinit_port (char portname , char numberpin)
{
	DIO_vset_port_direction(portname , numberpin);
 a6e:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vset_port_direction>
}
 a72:	08 95       	ret

00000a74 <LED_vturn_on_pin>:

/*************** turn on led *****************/
void LED_vturn_on_pin (char portname , char pinnumber)
{
	DIO_vwrite_pin_value(portname,pinnumber,1);
 a74:	41 e0       	ldi	r20, 0x01	; 1
 a76:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
}
 a7a:	08 95       	ret

00000a7c <LED_vturn_on_port>:

/*************** turn on port *****************/
void LED_vturn_on_port (char portname , char numberpin)
{
	DIO_vwrite_port_value(portname,numberpin);
 a7c:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_vwrite_port_value>
}
 a80:	08 95       	ret

00000a82 <LED_vturn_off_pin>:

/*************** turn off led *****************/
void LED_vturn_off_pin (char portname , char pinnumber)
{
	DIO_vwrite_pin_value(portname,pinnumber,0);
 a82:	40 e0       	ldi	r20, 0x00	; 0
 a84:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin_value>
}
 a88:	08 95       	ret

00000a8a <LED_vturn_off_port>:

/*************** turn off port *****************/
void LED_vturn_off_port (char portname , char numberpin)
{
	DIO_vwrite_port_value(portname,numberpin);
 a8a:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_vwrite_port_value>
}
 a8e:	08 95       	ret

00000a90 <LED_vtoggle_pin>:

/*************** toggle led *****************/
void LED_vtoggle_pin (char portname , char pinnumber)
{
	DIO_vtoggle_pin(portname,pinnumber);
 a90:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_vtoggle_pin>
}
 a94:	08 95       	ret

00000a96 <LED_vtoggle_port>:

/*************** toggle port *****************/
void LED_vtoggle_port (char portname )
{
	DIO_vtoggle_port(portname);
 a96:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_vtoggle_port>
}
 a9a:	08 95       	ret

00000a9c <LED_u8read_pin>:

/*************** read led *****************/
unsigned char LED_u8read_pin(char portname , char pinnumber)
{
	return DIO_u8read_pin(portname,pinnumber);
 a9c:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8read_pin>
}
 aa0:	08 95       	ret

00000aa2 <LED_u8read_port>:

/*************** read port *****************/
unsigned char LED_u8read_port(char portname)
{
	return DIO_u8read_port(portname);
 aa2:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_u8read_port>
}
 aa6:	08 95       	ret

00000aa8 <main>:
#define EEPROM_Thired_Addrss	0x63
#define EEPROM_Four_Addrss		0x64
#define MAX_TRIES 3

int main(void)
{
 aa8:	4f 92       	push	r4
 aaa:	5f 92       	push	r5
 aac:	6f 92       	push	r6
 aae:	7f 92       	push	r7
 ab0:	8f 92       	push	r8
 ab2:	9f 92       	push	r9
 ab4:	bf 92       	push	r11
 ab6:	cf 92       	push	r12
 ab8:	df 92       	push	r13
 aba:	ef 92       	push	r14
 abc:	ff 92       	push	r15
 abe:	0f 93       	push	r16
 ac0:	1f 93       	push	r17
 ac2:	cf 93       	push	r28
 ac4:	df 93       	push	r29
 ac6:	00 d0       	rcall	.+0      	; 0xac8 <main+0x20>
 ac8:	00 d0       	rcall	.+0      	; 0xaca <main+0x22>
 aca:	cd b7       	in	r28, 0x3d	; 61
 acc:	de b7       	in	r29, 0x3e	; 62
	uint8_t val = NOT_PRESSED;
	uint8_t i , flag=0;
	uint8_t arr[4] = {NOT_PRESSED , NOT_PRESSED , NOT_PRESSED ,NOT_PRESSED};
 ace:	8f ef       	ldi	r24, 0xFF	; 255
 ad0:	89 83       	std	Y+1, r24	; 0x01
 ad2:	8a 83       	std	Y+2, r24	; 0x02
 ad4:	8b 83       	std	Y+3, r24	; 0x03
 ad6:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t tries = MAX_TRIES;

	LCD_vinit();
 ad8:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vinit>
	Keybad_vinit();
 adc:	0e 94 a6 03 	call	0x74c	; 0x74c <Keybad_vinit>
	LED_vinit_pin('a',0);//open
 ae0:	81 e6       	ldi	r24, 0x61	; 97
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	0e 94 33 05 	call	0xa66	; 0xa66 <LED_vinit_pin>
	LED_vinit_pin('a',1);//close
 ae8:	81 e6       	ldi	r24, 0x61	; 97
 aea:	61 e0       	ldi	r22, 0x01	; 1
 aec:	0e 94 33 05 	call	0xa66	; 0xa66 <LED_vinit_pin>
    LCD_vsend_string("    Welcome   ");
 af0:	80 e7       	ldi	r24, 0x70	; 112
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 af8:	8f ef       	ldi	r24, 0xFF	; 255
 afa:	99 e6       	ldi	r25, 0x69	; 105
 afc:	a8 e1       	ldi	r26, 0x18	; 24
 afe:	81 50       	subi	r24, 0x01	; 1
 b00:	90 40       	sbci	r25, 0x00	; 0
 b02:	a0 40       	sbci	r26, 0x00	; 0
 b04:	e1 f7       	brne	.-8      	; 0xafe <main+0x56>
 b06:	00 c0       	rjmp	.+0      	; 0xb08 <main+0x60>
 b08:	00 00       	nop
    _delay_ms(1000);
    LCD_vClearScreen();
 b0a:	0e 94 08 05 	call	0xa10	; 0xa10 <LCD_vClearScreen>
	
    // At First check if set password or has default pass
	if (EEPROM_u8read(EEPROM_START_addrss) == NOT_PRESSED)//0xff default unprogramming EEPROM
 b0e:	80 e6       	ldi	r24, 0x60	; 96
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_u8read>
 b16:	8f 3f       	cpi	r24, 0xFF	; 255
 b18:	f1 f5       	brne	.+124    	; 0xb96 <main+0xee>
	{
		LCD_vsend_string("Set Pass:");
 b1a:	8f e7       	ldi	r24, 0x7F	; 127
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 b22:	0f 2e       	mov	r0, r31
 b24:	f1 e6       	ldi	r31, 0x61	; 97
 b26:	ef 2e       	mov	r14, r31
 b28:	ff 24       	eor	r15, r15
 b2a:	f0 2d       	mov	r31, r0
		for (i=0 ; i<4 ; i++)
		{
			do
			{
				val = Keybad_u8read();
 b2c:	0e 94 bf 03 	call	0x77e	; 0x77e <Keybad_u8read>
 b30:	08 2f       	mov	r16, r24
				
			} while (val == NOT_PRESSED);
 b32:	8f 3f       	cpi	r24, 0xFF	; 255
 b34:	d9 f3       	breq	.-10     	; 0xb2c <main+0x84>
#define EEPROM_Secand_Addrss	0x62
#define EEPROM_Thired_Addrss	0x63
#define EEPROM_Four_Addrss		0x64
#define MAX_TRIES 3

int main(void)
 b36:	6e 2d       	mov	r22, r14
 b38:	67 55       	subi	r22, 0x57	; 87
			{
				val = Keybad_u8read();
				
			} while (val == NOT_PRESSED);
			//LCD_vsend_char(val);
			LCD_vmove_cursor(1,10+i);
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_vmove_cursor>
			LCD_vsend_char('*');
 b40:	8a e2       	ldi	r24, 0x2A	; 42
 b42:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vsend_char>
			EEPROM_vwrite(EEPROM_First_Addrss+i , val);
 b46:	c7 01       	movw	r24, r14
 b48:	60 2f       	mov	r22, r16
 b4a:	0e 94 99 03 	call	0x732	; 0x732 <EEPROM_vwrite>
 b4e:	08 94       	sec
 b50:	e1 1c       	adc	r14, r1
 b52:	f1 1c       	adc	r15, r1
	
    // At First check if set password or has default pass
	if (EEPROM_u8read(EEPROM_START_addrss) == NOT_PRESSED)//0xff default unprogramming EEPROM
	{
		LCD_vsend_string("Set Pass:");
		for (i=0 ; i<4 ; i++)
 b54:	95 e6       	ldi	r25, 0x65	; 101
 b56:	e9 16       	cp	r14, r25
 b58:	f1 04       	cpc	r15, r1
 b5a:	41 f7       	brne	.-48     	; 0xb2c <main+0x84>
 b5c:	8f ef       	ldi	r24, 0xFF	; 255
 b5e:	94 e3       	ldi	r25, 0x34	; 52
 b60:	ac e0       	ldi	r26, 0x0C	; 12
 b62:	81 50       	subi	r24, 0x01	; 1
 b64:	90 40       	sbci	r25, 0x00	; 0
 b66:	a0 40       	sbci	r26, 0x00	; 0
 b68:	e1 f7       	brne	.-8      	; 0xb62 <main+0xba>
 b6a:	00 c0       	rjmp	.+0      	; 0xb6c <main+0xc4>
 b6c:	00 00       	nop
			LCD_vsend_char('*');
			EEPROM_vwrite(EEPROM_First_Addrss+i , val);
			//delay_ms(500);
		}
        _delay_ms(500);
		EEPROM_vwrite(EEPROM_START_addrss , 0x00);//programming
 b6e:	80 e6       	ldi	r24, 0x60	; 96
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	60 e0       	ldi	r22, 0x00	; 0
 b74:	0e 94 99 03 	call	0x732	; 0x732 <EEPROM_vwrite>
        LCD_vClearScreen();
 b78:	0e 94 08 05 	call	0xa10	; 0xa10 <LCD_vClearScreen>
        LCD_vsend_string("Now Set New Pass");
 b7c:	89 e8       	ldi	r24, 0x89	; 137
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	99 e6       	ldi	r25, 0x69	; 105
 b88:	a8 e1       	ldi	r26, 0x18	; 24
 b8a:	81 50       	subi	r24, 0x01	; 1
 b8c:	90 40       	sbci	r25, 0x00	; 0
 b8e:	a0 40       	sbci	r26, 0x00	; 0
 b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0xe2>
 b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0xec>
 b94:	00 00       	nop
    LCD_vClearScreen();
	
    // At First check if set password or has default pass
	if (EEPROM_u8read(EEPROM_START_addrss) == NOT_PRESSED)//0xff default unprogramming EEPROM
	{
		LCD_vsend_string("Set Pass:");
 b96:	0f 2e       	mov	r0, r31
 b98:	f2 e3       	ldi	r31, 0x32	; 50
 b9a:	ef 2e       	mov	r14, r31
 b9c:	f0 2d       	mov	r31, r0
	while (!flag)
	{
		//arr[0] = arr[1] = arr[2] = arr[3] = NOT_PRESSED;
		LCD_vClearScreen();
		_delay_ms(1000);
		LCD_vsend_string("Check Pass:");
 b9e:	0f 2e       	mov	r0, r31
 ba0:	fa e9       	ldi	r31, 0x9A	; 154
 ba2:	cf 2e       	mov	r12, r31
 ba4:	f0 e0       	ldi	r31, 0x00	; 0
 ba6:	df 2e       	mov	r13, r31
 ba8:	f0 2d       	mov	r31, r0
 baa:	0f 2e       	mov	r0, r31
 bac:	fc e0       	ldi	r31, 0x0C	; 12
 bae:	bf 2e       	mov	r11, r31
 bb0:	f0 2d       	mov	r31, r0
			--tries;
			if (tries > 0)
			{
				LCD_vClearScreen();
				_delay_ms(1000);
				LCD_vsend_string("Wrong Pass");
 bb2:	0f 2e       	mov	r0, r31
 bb4:	fa eb       	ldi	r31, 0xBA	; 186
 bb6:	8f 2e       	mov	r8, r31
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	9f 2e       	mov	r9, r31
 bbc:	f0 2d       	mov	r31, r0
				LCD_vmove_cursor(2,1);
				LCD_vsend_string("Try Again");
 bbe:	0f 2e       	mov	r0, r31
 bc0:	f5 ec       	ldi	r31, 0xC5	; 197
 bc2:	6f 2e       	mov	r6, r31
 bc4:	f0 e0       	ldi	r31, 0x00	; 0
 bc6:	7f 2e       	mov	r7, r31
 bc8:	f0 2d       	mov	r31, r0
				_delay_ms(1000);
				LCD_vClearScreen();
				LCD_vsend_string("Have Tries: ");
 bca:	0f 2e       	mov	r0, r31
 bcc:	ff ec       	ldi	r31, 0xCF	; 207
 bce:	4f 2e       	mov	r4, r31
 bd0:	f0 e0       	ldi	r31, 0x00	; 0
 bd2:	5f 2e       	mov	r5, r31
 bd4:	f0 2d       	mov	r31, r0

    // enter the password ( operations check )
	while (!flag)
	{
		//arr[0] = arr[1] = arr[2] = arr[3] = NOT_PRESSED;
		LCD_vClearScreen();
 bd6:	0e 94 08 05 	call	0xa10	; 0xa10 <LCD_vClearScreen>
 bda:	8f ef       	ldi	r24, 0xFF	; 255
 bdc:	99 e6       	ldi	r25, 0x69	; 105
 bde:	a8 e1       	ldi	r26, 0x18	; 24
 be0:	81 50       	subi	r24, 0x01	; 1
 be2:	90 40       	sbci	r25, 0x00	; 0
 be4:	a0 40       	sbci	r26, 0x00	; 0
 be6:	e1 f7       	brne	.-8      	; 0xbe0 <main+0x138>
 be8:	00 c0       	rjmp	.+0      	; 0xbea <main+0x142>
 bea:	00 00       	nop
		_delay_ms(1000);
		LCD_vsend_string("Check Pass:");
 bec:	c6 01       	movw	r24, r12
 bee:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 bf2:	8e 01       	movw	r16, r28
 bf4:	0f 5f       	subi	r16, 0xFF	; 255
 bf6:	1f 4f       	sbci	r17, 0xFF	; 255
 bf8:	fb 2c       	mov	r15, r11
		for (i=0 ; i<4 ; i++)
		{
			do 
			{
				arr[i] = Keybad_u8read();
 bfa:	0e 94 bf 03 	call	0x77e	; 0x77e <Keybad_u8read>
 bfe:	d8 01       	movw	r26, r16
 c00:	8c 93       	st	X, r24
			} while (arr[i] == NOT_PRESSED);
 c02:	8f 3f       	cpi	r24, 0xFF	; 255
 c04:	d1 f3       	breq	.-12     	; 0xbfa <main+0x152>
			//LCD_vsend_char(arr[i]);
			LCD_vmove_cursor(1,12+i);
 c06:	81 e0       	ldi	r24, 0x01	; 1
 c08:	6f 2d       	mov	r22, r15
 c0a:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_vmove_cursor>
			LCD_vsend_char('*');
 c0e:	8a e2       	ldi	r24, 0x2A	; 42
 c10:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vsend_char>
 c14:	f3 94       	inc	r15
 c16:	0f 5f       	subi	r16, 0xFF	; 255
 c18:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		//arr[0] = arr[1] = arr[2] = arr[3] = NOT_PRESSED;
		LCD_vClearScreen();
		_delay_ms(1000);
		LCD_vsend_string("Check Pass:");
		for (i=0 ; i<4 ; i++)
 c1a:	b0 e1       	ldi	r27, 0x10	; 16
 c1c:	fb 16       	cp	r15, r27
 c1e:	69 f7       	brne	.-38     	; 0xbfa <main+0x152>
 c20:	8f ef       	ldi	r24, 0xFF	; 255
 c22:	94 e3       	ldi	r25, 0x34	; 52
 c24:	ac e0       	ldi	r26, 0x0C	; 12
 c26:	81 50       	subi	r24, 0x01	; 1
 c28:	90 40       	sbci	r25, 0x00	; 0
 c2a:	a0 40       	sbci	r26, 0x00	; 0
 c2c:	e1 f7       	brne	.-8      	; 0xc26 <main+0x17e>
 c2e:	00 c0       	rjmp	.+0      	; 0xc30 <main+0x188>
 c30:	00 00       	nop
		}
        _delay_ms(500);

        // check entered password with correct password stored in EEPROM Address 
        // enter correct password
		if (EEPROM_u8read(EEPROM_First_Addrss)  == arr[0] && EEPROM_u8read(EEPROM_Secand_Addrss) == arr[1] 
 c32:	81 e6       	ldi	r24, 0x61	; 97
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_u8read>
 c3a:	99 81       	ldd	r25, Y+1	; 0x01
 c3c:	89 17       	cp	r24, r25
 c3e:	09 f0       	breq	.+2      	; 0xc42 <main+0x19a>
 c40:	4d c0       	rjmp	.+154    	; 0xcdc <main+0x234>
 c42:	82 e6       	ldi	r24, 0x62	; 98
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_u8read>
 c4a:	9a 81       	ldd	r25, Y+2	; 0x02
 c4c:	89 17       	cp	r24, r25
 c4e:	09 f0       	breq	.+2      	; 0xc52 <main+0x1aa>
 c50:	45 c0       	rjmp	.+138    	; 0xcdc <main+0x234>
			&& EEPROM_u8read(EEPROM_Thired_Addrss) == arr[2] && EEPROM_u8read(EEPROM_Four_Addrss) == arr[3])
 c52:	83 e6       	ldi	r24, 0x63	; 99
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_u8read>
 c5a:	9b 81       	ldd	r25, Y+3	; 0x03
 c5c:	89 17       	cp	r24, r25
 c5e:	f1 f5       	brne	.+124    	; 0xcdc <main+0x234>
 c60:	84 e6       	ldi	r24, 0x64	; 100
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	0e 94 a1 03 	call	0x742	; 0x742 <EEPROM_u8read>
 c68:	9c 81       	ldd	r25, Y+4	; 0x04
 c6a:	89 17       	cp	r24, r25
 c6c:	b9 f5       	brne	.+110    	; 0xcdc <main+0x234>
 c6e:	8f ef       	ldi	r24, 0xFF	; 255
 c70:	99 e6       	ldi	r25, 0x69	; 105
 c72:	a8 e1       	ldi	r26, 0x18	; 24
 c74:	81 50       	subi	r24, 0x01	; 1
 c76:	90 40       	sbci	r25, 0x00	; 0
 c78:	a0 40       	sbci	r26, 0x00	; 0
 c7a:	e1 f7       	brne	.-8      	; 0xc74 <main+0x1cc>
 c7c:	00 c0       	rjmp	.+0      	; 0xc7e <main+0x1d6>
 c7e:	00 00       	nop
		{
			_delay_ms(1000);
			LCD_vClearScreen();
 c80:	0e 94 08 05 	call	0xa10	; 0xa10 <LCD_vClearScreen>
 c84:	8f ef       	ldi	r24, 0xFF	; 255
 c86:	99 e6       	ldi	r25, 0x69	; 105
 c88:	a8 e1       	ldi	r26, 0x18	; 24
 c8a:	81 50       	subi	r24, 0x01	; 1
 c8c:	90 40       	sbci	r25, 0x00	; 0
 c8e:	a0 40       	sbci	r26, 0x00	; 0
 c90:	e1 f7       	brne	.-8      	; 0xc8a <main+0x1e2>
 c92:	00 c0       	rjmp	.+0      	; 0xc94 <main+0x1ec>
 c94:	00 00       	nop
			_delay_ms(1000);
			LCD_vsend_string("True Pass");
 c96:	86 ea       	ldi	r24, 0xA6	; 166
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 c9e:	8f ef       	ldi	r24, 0xFF	; 255
 ca0:	99 e6       	ldi	r25, 0x69	; 105
 ca2:	a8 e1       	ldi	r26, 0x18	; 24
 ca4:	81 50       	subi	r24, 0x01	; 1
 ca6:	90 40       	sbci	r25, 0x00	; 0
 ca8:	a0 40       	sbci	r26, 0x00	; 0
 caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0x1fc>
 cac:	00 c0       	rjmp	.+0      	; 0xcae <main+0x206>
 cae:	00 00       	nop
			_delay_ms(1000);
			LCD_vmove_cursor(2,1);
 cb0:	82 e0       	ldi	r24, 0x02	; 2
 cb2:	61 e0       	ldi	r22, 0x01	; 1
 cb4:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_vmove_cursor>
			LCD_vsend_string("Open Safe");
 cb8:	80 eb       	ldi	r24, 0xB0	; 176
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 cc0:	8f ef       	ldi	r24, 0xFF	; 255
 cc2:	99 e6       	ldi	r25, 0x69	; 105
 cc4:	a8 e1       	ldi	r26, 0x18	; 24
 cc6:	81 50       	subi	r24, 0x01	; 1
 cc8:	90 40       	sbci	r25, 0x00	; 0
 cca:	a0 40       	sbci	r26, 0x00	; 0
 ccc:	e1 f7       	brne	.-8      	; 0xcc6 <main+0x21e>
 cce:	00 c0       	rjmp	.+0      	; 0xcd0 <main+0x228>
 cd0:	00 00       	nop
			_delay_ms(1000);
			LED_vturn_on_pin('a',0);
 cd2:	81 e6       	ldi	r24, 0x61	; 97
 cd4:	60 e0       	ldi	r22, 0x00	; 0
 cd6:	0e 94 3a 05 	call	0xa74	; 0xa74 <LED_vturn_on_pin>
			flag =1; // exit from while loop
 cda:	6a c0       	rjmp	.+212    	; 0xdb0 <main+0x308>
		} 
        // enter fault password
		else
		{
			--tries;
			if (tries > 0)
 cdc:	90 e3       	ldi	r25, 0x30	; 48
 cde:	e9 16       	cp	r14, r25
 ce0:	89 f1       	breq	.+98     	; 0xd44 <main+0x29c>
			{
				LCD_vClearScreen();
 ce2:	0e 94 08 05 	call	0xa10	; 0xa10 <LCD_vClearScreen>
 ce6:	8f ef       	ldi	r24, 0xFF	; 255
 ce8:	99 e6       	ldi	r25, 0x69	; 105
 cea:	a8 e1       	ldi	r26, 0x18	; 24
 cec:	81 50       	subi	r24, 0x01	; 1
 cee:	90 40       	sbci	r25, 0x00	; 0
 cf0:	a0 40       	sbci	r26, 0x00	; 0
 cf2:	e1 f7       	brne	.-8      	; 0xcec <main+0x244>
 cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <main+0x24e>
 cf6:	00 00       	nop
				_delay_ms(1000);
				LCD_vsend_string("Wrong Pass");
 cf8:	c4 01       	movw	r24, r8
 cfa:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
				LCD_vmove_cursor(2,1);
 cfe:	82 e0       	ldi	r24, 0x02	; 2
 d00:	61 e0       	ldi	r22, 0x01	; 1
 d02:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_vmove_cursor>
				LCD_vsend_string("Try Again");
 d06:	c3 01       	movw	r24, r6
 d08:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 d0c:	8f ef       	ldi	r24, 0xFF	; 255
 d0e:	99 e6       	ldi	r25, 0x69	; 105
 d10:	a8 e1       	ldi	r26, 0x18	; 24
 d12:	81 50       	subi	r24, 0x01	; 1
 d14:	90 40       	sbci	r25, 0x00	; 0
 d16:	a0 40       	sbci	r26, 0x00	; 0
 d18:	e1 f7       	brne	.-8      	; 0xd12 <main+0x26a>
 d1a:	00 c0       	rjmp	.+0      	; 0xd1c <main+0x274>
 d1c:	00 00       	nop
				_delay_ms(1000);
				LCD_vClearScreen();
 d1e:	0e 94 08 05 	call	0xa10	; 0xa10 <LCD_vClearScreen>
				LCD_vsend_string("Have Tries: ");
 d22:	c2 01       	movw	r24, r4
 d24:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
				LCD_vsend_char(tries + 48);
 d28:	8e 2d       	mov	r24, r14
 d2a:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vsend_char>
 d2e:	8f ef       	ldi	r24, 0xFF	; 255
 d30:	99 e6       	ldi	r25, 0x69	; 105
 d32:	a8 e1       	ldi	r26, 0x18	; 24
 d34:	81 50       	subi	r24, 0x01	; 1
 d36:	90 40       	sbci	r25, 0x00	; 0
 d38:	a0 40       	sbci	r26, 0x00	; 0
 d3a:	e1 f7       	brne	.-8      	; 0xd34 <main+0x28c>
 d3c:	00 c0       	rjmp	.+0      	; 0xd3e <main+0x296>
 d3e:	00 00       	nop
 d40:	ea 94       	dec	r14
 d42:	49 cf       	rjmp	.-366    	; 0xbd6 <main+0x12e>
 d44:	8f ef       	ldi	r24, 0xFF	; 255
 d46:	99 e6       	ldi	r25, 0x69	; 105
 d48:	a8 e1       	ldi	r26, 0x18	; 24
 d4a:	81 50       	subi	r24, 0x01	; 1
 d4c:	90 40       	sbci	r25, 0x00	; 0
 d4e:	a0 40       	sbci	r26, 0x00	; 0
 d50:	e1 f7       	brne	.-8      	; 0xd4a <main+0x2a2>
 d52:	00 c0       	rjmp	.+0      	; 0xd54 <main+0x2ac>
 d54:	00 00       	nop
				_delay_ms(1000);
			} 
			else
			{
				_delay_ms(1000);
				LCD_vClearScreen();
 d56:	0e 94 08 05 	call	0xa10	; 0xa10 <LCD_vClearScreen>
 d5a:	8f ef       	ldi	r24, 0xFF	; 255
 d5c:	99 e6       	ldi	r25, 0x69	; 105
 d5e:	a8 e1       	ldi	r26, 0x18	; 24
 d60:	81 50       	subi	r24, 0x01	; 1
 d62:	90 40       	sbci	r25, 0x00	; 0
 d64:	a0 40       	sbci	r26, 0x00	; 0
 d66:	e1 f7       	brne	.-8      	; 0xd60 <main+0x2b8>
 d68:	00 c0       	rjmp	.+0      	; 0xd6a <main+0x2c2>
 d6a:	00 00       	nop
				_delay_ms(1000);
				LCD_vsend_string("End Tries");
 d6c:	8c ed       	ldi	r24, 0xDC	; 220
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 d74:	8f ef       	ldi	r24, 0xFF	; 255
 d76:	99 e6       	ldi	r25, 0x69	; 105
 d78:	a8 e1       	ldi	r26, 0x18	; 24
 d7a:	81 50       	subi	r24, 0x01	; 1
 d7c:	90 40       	sbci	r25, 0x00	; 0
 d7e:	a0 40       	sbci	r26, 0x00	; 0
 d80:	e1 f7       	brne	.-8      	; 0xd7a <main+0x2d2>
 d82:	00 c0       	rjmp	.+0      	; 0xd84 <main+0x2dc>
 d84:	00 00       	nop
				_delay_ms(1000);
				LCD_vmove_cursor(2,1);
 d86:	82 e0       	ldi	r24, 0x02	; 2
 d88:	61 e0       	ldi	r22, 0x01	; 1
 d8a:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_vmove_cursor>
				LCD_vsend_string("Close Safe");
 d8e:	86 ee       	ldi	r24, 0xE6	; 230
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_vsend_string>
 d96:	8f ef       	ldi	r24, 0xFF	; 255
 d98:	99 e6       	ldi	r25, 0x69	; 105
 d9a:	a8 e1       	ldi	r26, 0x18	; 24
 d9c:	81 50       	subi	r24, 0x01	; 1
 d9e:	90 40       	sbci	r25, 0x00	; 0
 da0:	a0 40       	sbci	r26, 0x00	; 0
 da2:	e1 f7       	brne	.-8      	; 0xd9c <main+0x2f4>
 da4:	00 c0       	rjmp	.+0      	; 0xda6 <main+0x2fe>
 da6:	00 00       	nop
				_delay_ms(1000);
				LED_vturn_on_pin('a',1);
 da8:	81 e6       	ldi	r24, 0x61	; 97
 daa:	61 e0       	ldi	r22, 0x01	; 1
 dac:	0e 94 3a 05 	call	0xa74	; 0xa74 <LED_vturn_on_pin>
				flag =1; // exit from while loop
			}
		}
	}
 db0:	80 e0       	ldi	r24, 0x00	; 0
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	0f 90       	pop	r0
 db6:	0f 90       	pop	r0
 db8:	0f 90       	pop	r0
 dba:	0f 90       	pop	r0
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	1f 91       	pop	r17
 dc2:	0f 91       	pop	r16
 dc4:	ff 90       	pop	r15
 dc6:	ef 90       	pop	r14
 dc8:	df 90       	pop	r13
 dca:	cf 90       	pop	r12
 dcc:	bf 90       	pop	r11
 dce:	9f 90       	pop	r9
 dd0:	8f 90       	pop	r8
 dd2:	7f 90       	pop	r7
 dd4:	6f 90       	pop	r6
 dd6:	5f 90       	pop	r5
 dd8:	4f 90       	pop	r4
 dda:	08 95       	ret

00000ddc <_exit>:
 ddc:	f8 94       	cli

00000dde <__stop_program>:
 dde:	ff cf       	rjmp	.-2      	; 0xdde <__stop_program>
